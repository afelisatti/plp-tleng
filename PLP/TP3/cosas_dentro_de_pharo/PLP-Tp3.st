Object subclass: #Polinomio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:31'!* otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:31'!+ otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'mtqp 6/15/2013 16:41'!= otroPolinomio	| coefOtro filteredDiccOtro filteredDiccSelf |	coefOtro := otroPolinomio coeficientes.	filteredDiccOtro := coefOtro select: [:significado | significado ~= 0 ]. "Filtramos todos los coeficientes en cero para comparar la igualdad"	filteredDiccSelf := (self coeficientes) select: [:significado | significado ~= 0 ].	^ filteredDiccOtro = filteredDiccSelf.! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:40'!coeficientes! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:58'!evaluar: unValor! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:32'!grado! !Polinomio subclass: #PolinomioConstante	instanceVariableNames: 'valor'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:30'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:29'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 12:42'!coeficientes	| unDiccionario |	unDiccionario := Dictionary new.	unDiccionario at: 0 put: valor.	^ unDiccionario.! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:13'!evaluar: aValor  ^ valor! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:07'!grado 	^0! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:29'!initializeWithValue: aValue	valor  := aValue.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioConstante class	instanceVariableNames: ''!!PolinomioConstante class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:28'!new: aValue	^self new initializeWithValue: aValue.! !Polinomio subclass: #PolinomioMultiplicacion	instanceVariableNames: 'polinomioIzquierdo polinomioDerecho'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:35'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/15/2013 15:54'!coeficientes 	| dicPolIzq dicPolDer newDic clavesDicIzq clavesDicDer claveMult significadoMult sumaSignificado|	newDic := Dictionary new.	dicPolIzq := (polinomioIzquierdo coeficientes).	dicPolDer := (polinomioDerecho coeficientes).	clavesDicIzq := (dicPolIzq keys).	clavesDicDer := (dicPolDer keys).	clavesDicIzq do: [ :claveIzq | 		 			 		clavesDicDer do: [  :claveDer |																significadoMult := (dicPolIzq at: claveIzq)  * (dicPolDer at: claveDer).								claveMult := claveIzq  + claveDer.								(									newDic at: claveMult 										ifPresent: 												[ : significadoPresenteEnNewDic |													sumaSignificado := significadoPresenteEnNewDic + significadoMult .													newDic at:claveMult put: sumaSignificado. ] 								 		ifAbsent: 												[ newDic at:claveMult put: significadoMult ]								)							]						].		^ newDic.! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:16'!evaluar: aValue  ^ (polinomioIzquierdo evaluar: aValue) * (polinomioDerecho evaluar: aValue) ! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:20'!grado 	^(polinomioIzquierdo grado) + (polinomioDerecho grado)! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:03'!initializeWith: unPolinomio and: otroPolinomio	polinomioIzquierdo := unPolinomio .	polinomioDerecho := otroPolinomio .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioMultiplicacion class	instanceVariableNames: ''!!PolinomioMultiplicacion class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:00'!new: unPolinomio with: otroPolimio 	^self new initializeWith: unPolinomio and: otroPolimio. 	! !Polinomio subclass: #PolinomioVariable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/15/2013 16:01'!coeficientes	| unDiccionario |	unDiccionario := Dictionary new.	unDiccionario at: 1 put: 1.	^ unDiccionario.! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:08'!evaluar: valor ^ valor ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:07'!grado 	^1! !Polinomio subclass: #PolinomioSuma	instanceVariableNames: 'polinomioIzquierdo polinomioDerecho'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 12:59'!coeficientes	"Se recorren ambos diccionarios y se suman los valores de sus claves. Si no existe una clave se define con el valor que tenga"	| dicPolIzq dicPolDer newDic clavesDicIzq clavesDicDer significado1 sumaSignificado|	newDic := Dictionary new.	dicPolIzq := (polinomioIzquierdo coeficientes).	dicPolDer := (polinomioDerecho coeficientes).	"Itero el diccionario del primer polinomio y guardo las definiciones que no interesecan con el diccionario2 en el nuevo diccionario y las definiciones que interesecan con el diccionario 2 sumadas"	clavesDicIzq := (dicPolIzq keys).	clavesDicIzq do: [ :clave |  							significado1 := dicPolIzq at: clave.  							(dicPolDer at: clave 								ifPresent: [ : significado2 |											sumaSignificado := significado1 + significado2.											newDic at:clave put: sumaSignificado. ] 							 	ifAbsent: 										[	newDic at:clave put: significado1]							)						].	"Itero el diccionario del segundo polinomio y guardo las definiciones que estan en la diferencia entre ambos diccionarios."	clavesDicDer := (dicPolDer keys).	clavesDicDer do: [ :clave |						(newDic at: clave 							ifAbsent: 								[ significado1 := dicPolDer at: clave.  								  newDic at:clave put: significado1])					 	].		^ newDic.! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:16'!evaluar: aValue  ^ (polinomioIzquierdo evaluar: aValue) + (polinomioDerecho evaluar: aValue) ! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:19'!grado 	^(polinomioIzquierdo grado) max: (polinomioDerecho grado)! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:04'!initializeWith: unPolinomio and: otroPolinomio	polinomioIzquierdo := unPolinomio.	polinomioDerecho := otroPolinomio.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioSuma class	instanceVariableNames: ''!!PolinomioSuma class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:06'!new: polinomioIzquierdo with: polinomioDerecho 	^self new initializeWith: polinomioIzquierdo and: polinomioDerecho.! !TestCase subclass: #PolinomioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioTest commentStamp: '<historical>' prior: 0!A PolinomioTest is a test class for testing the behavior of Polinomio!!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:02'!polinomio1		^ (PolinomioVariable new) + (PolinomioConstante new:69).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:02'!polinomio2	^ (PolinomioConstante new: 69).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:06'!polinomio3	^ (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'mtqp 6/15/2013 15:59'!polinomio4	^ (((PolinomioVariable new) * (PolinomioVariable new) + (PolinomioConstante new: 7)) * (PolinomioVariable new) )+ (PolinomioConstante new: 90).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:07'!polinomio5	^ (PolinomioVariable new) * ((PolinomioConstante new: 0) + (PolinomioVariable new) * (PolinomioVariable new)).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:07'!polinomio6	^ (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:08'!polinomio7	^ (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:18'!polinomio8	^ (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:14'!testCoeficientes	"Test de coeficientes de polinomios"		|  polinomio1 polinomio4 |		polinomio1 := self polinomio1.	polinomio4 := self polinomio4.		self assert: ((polinomio1 coeficientes at: 0) = 69).	self assert: ((polinomio1 coeficientes at: 1) = 1).	self assert: ((polinomio4 coeficientes at: 0) = 90).	self assert: ((polinomio4 coeficientes at: 1) = 7).	self assert: ((polinomio4 coeficientes at: 3) = 1).	self assert: ( (polinomio4 coeficientes includesKey: 2) not).	self assert: ( (polinomio4 coeficientes includesKey: 4) not).	self assert: ( (polinomio4 coeficientes size) = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:03'!testEvaluar	"Test de evaluación de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: ( (polinomio1 evaluar:  11) = 80).		self assert: ( (polinomio2 evaluar: nil) = 69).	self assert: ( (polinomio2 evaluar: 23) = 69).		self assert: ( (polinomio3 evaluar: 3) = 27).		self assert: ( (polinomio4 evaluar: 2) = 112).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:00'!testGrado	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: (polinomio1 grado = 1).	self assert: (polinomio2 grado = 0).	self assert: (polinomio3 grado = 3).	self assert: (polinomio4 grado = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:05'!testIgualdad	"Test de igualdad de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio5 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio5 := self polinomio5.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( (polinomio1 = polinomio2) not ).	self assert: ( polinomio3 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:18'!testMetaprogramacion	| polinomio |		polinomio := self polinomio1 .	self assert: ( (polinomio evaluar: (PolinomioTest new)  ) = 'AlguienNoEntiende' ).	self assert:( (polinomio evaluar: '12') = 81). ! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testMultiplicacion	"Test de multiplicacion de polinomios"	| polinomio3 polinomio5 polinomio6 polinomio7 |		polinomio3 := self polinomio3.	polinomio5 := self polinomio5.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.		self assert: (polinomio6 * polinomio7 = polinomio3).	self assert: (polinomio7 * polinomio6 = polinomio3).	self assert: (polinomio6 * polinomio7 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testSuma	"Test suma de polinomios"	| polinomio1 polinomio2 polinomio6|		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio6 := self polinomio6.		self assert: (polinomio2 + polinomio6 = polinomio1).	self assert: (polinomio6 + polinomio2 = polinomio1).	! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:16'!testSupremo	"El test supremo de los polinomios"	| polinomio3 polinomio6 polinomio7 polinomio8 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.	polinomio8 := self polinomio8.			self assert: ( (polinomio6 evaluar: polinomio7) = polinomio7).		self assert: ( (polinomio3 evaluar: polinomio6) = polinomio3).		self assert: ( (polinomio3 evaluar: polinomio7) = polinomio8). 		self assert: ( (polinomio7 evaluar: polinomio3) = polinomio8). ! !