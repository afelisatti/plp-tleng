TestCase subclass: #PolinomioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioTest commentStamp: '<historical>' prior: 0!A PolinomioTest is a test class for testing the behavior of Polinomio!!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:02'!polinomio1		^ (PolinomioVariable new) + (PolinomioConstante new:69).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:02'!polinomio2	^ (PolinomioConstante new: 69).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:06'!polinomio3	^ (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'mtqp 6/15/2013 15:59'!polinomio4	^ (((PolinomioVariable new) * (PolinomioVariable new) + (PolinomioConstante new: 7)) * (PolinomioVariable new) )+ (PolinomioConstante new: 90).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:07'!polinomio5	^ (PolinomioVariable new) * ((PolinomioConstante new: 0) + (PolinomioVariable new) * (PolinomioVariable new)).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:07'!polinomio6	^ (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:08'!polinomio7	^ (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:18'!polinomio8	^ (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:47'!testAll	"Invoca todos los tests alumnos y catedra y del universo conocido"        self testAllAlumnos.	  self testAllCatedra.  ! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:44'!testAllAlumnos	"Invoca todos los tests de alumnos"	  self testCoeficientes.	  self testEvaluandoConstantes. 	  self testEvaluandoMultiplicacionCruzada.	  self testEvaluandoVariables. 	  self testIgualdadConstantes. 	 self testSuma.  ! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:46'!testAllCatedra	"Invoca todos los tests alumnos y catedra"        self testEvaluar.	  self testGrado.	  self testIgualdad.	  self testMetaprogramacion.	  self testMultiplicacion.	  self testSupremo.  ! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:30'!testCoeficientes	"Test de evaluacion de coeficientes de polinomios"	| diccionario |		"Coeficientes de polinomios constantes"		diccionario := (self polinomioConstante0) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).				diccionario := (self polinomioConstante1) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).				diccionario := (self polinomioConstante1Negativo) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = -1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).			"Coeficientes de polinomios variables"		diccionario := (PolinomioVariable new) coeficientes.		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).			"Coeficientes de polinomios suma"		diccionario := (self polinomioConstante0 + self polinomioConstante0) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).				diccionario := (self polinomioConstante0 + self polinomioConstante1) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).				diccionario := (self polinomioConstante0 + self polinomioConstante1Negativo) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = -1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).			diccionario := (self polinomioConstante1 + self polinomioConstante1) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 2] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante1 + self polinomioConstante1Negativo) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante1Negativo + self polinomioConstante1Negativo) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = -2] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante0 + (PolinomioVariable new)) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 2).		diccionario := (self polinomioConstante1 + (PolinomioVariable new)) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 2).		diccionario := (self polinomioConstante0 + (PolinomioVariable new) * self polinomioConstante0 ) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 2).		diccionario := (self polinomioConstante0 + (PolinomioVariable new) * self polinomioConstante1 ) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 2).		diccionario := (self polinomioConstante1 + (PolinomioVariable new) * self polinomioConstante1 ) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 2).				diccionario := (self polinomioConstante1 + (self polinomioConstante1 * PolinomioVariable new)) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 2).	"Coeficientes de polinomios multiplicacion"					diccionario := (self polinomioConstante0 * self polinomioConstante0) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).				diccionario := (self polinomioConstante0 * self polinomioConstante1) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).				diccionario := (self polinomioConstante0 * self polinomioConstante1Negativo) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).			diccionario := (self polinomioConstante1 * self polinomioConstante1) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante1 * self polinomioConstante1Negativo) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = -1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante1Negativo * self polinomioConstante1Negativo) coeficientes.		self assert: (diccionario at:0 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		"Caso extraño del polinomio 0*X donde su coeficiente es [{1,0}]"		diccionario := (self polinomioConstante0 * (PolinomioVariable new)) coeficientes.		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante1 * (PolinomioVariable new)) coeficientes.		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante0 * (PolinomioVariable new) * self polinomioConstante0 ) coeficientes.		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante0 * (PolinomioVariable new) * self polinomioConstante1 ) coeficientes.		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 0] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		diccionario := (self polinomioConstante1 * (PolinomioVariable new) * self polinomioConstante1 ) coeficientes.		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).				diccionario := (self polinomioConstante1 * (self polinomioConstante1 * PolinomioVariable new)) coeficientes.		self assert: (diccionario at:1 ifPresent: [ :significado | significado = 1] ifAbsent: [False] ).		self assert: ((diccionario keys size) = 1).		"pepe*X"		diccionario := ((PolinomioConstante new: 'pepe') * PolinomioVariable new) coeficientes.		self assert: (diccionario at: 1 ifPresent: [:t2 | t2 = 'pepe'] ifAbsent: [False]).		self assert: diccionario keys size = 1.				"pepe*X + papa*X*X"		diccionario := ((PolinomioConstante new: 'pepe') * PolinomioVariable new + 					   ((PolinomioConstante new: 'papa')  * PolinomioVariable new * PolinomioVariable new)) coeficientes.		self assert: (diccionario at: 1 ifPresent: [:t2 | t2 = 'pepe'] ifAbsent: [False]).		self assert: (diccionario at: 2 ifPresent: [:t2 | t2 = 'papa'] ifAbsent: [False]).		self assert: diccionario keys size = 2.! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/16/2013 13:46'!testEvaluandoConstantes	"Test de evaluacion de polinomios constantes"	| polinomio evaluacion|      "Evalua polinomios constantes0"		evaluacion := self polinomioConstante0 evaluar: 0. 		self assert: ( evaluacion = 0 ).			evaluacion := self polinomioConstante0 evaluar: 1. 		self assert: ( evaluacion = 0 ).						evaluacion := self polinomioConstante0 evaluar: -1. 		self assert: ( evaluacion = 0 ).						evaluacion := self polinomioConstante0 evaluar: '1'. 		self assert: ( evaluacion = 0 ).					evaluacion := self polinomioConstante0 evaluar: [ :e | e+1].		self assert: ( evaluacion = 0 ).	     "Evalua polinomios constantes1"		evaluacion := self polinomioConstante1 evaluar: 0. 		self assert: ( evaluacion = 1 ).			evaluacion := self polinomioConstante1 evaluar: 1. 		self assert: ( evaluacion = 1 ).						evaluacion := self polinomioConstante1 evaluar: -1. 		self assert: ( evaluacion = 1 ).						evaluacion := self polinomioConstante1 evaluar: '1'. 		self assert: ( evaluacion = 1 ).						evaluacion := self polinomioConstante1 evaluar: [ :e | e+1].		self assert: ( evaluacion = 1 ).	     "Evalua polinomios constantes69"		evaluacion := self polinomioConstante69 evaluar: 0. 		self assert: ( evaluacion = 69 ).			evaluacion := self polinomioConstante69 evaluar: 1. 		self assert: ( evaluacion = 69 ).						evaluacion := self polinomioConstante69 evaluar: -1. 		self assert: ( evaluacion = 69 ).						evaluacion := self polinomioConstante69 evaluar: '1'. 		self assert: ( evaluacion = 69 ).					evaluacion := self polinomioConstante69 evaluar: [ :e | e+1].		self assert: ( evaluacion = 69 ).			"Polinomio 0*X"		polinomio := (self polinomioConstante0) * (PolinomioVariable new).		self assert: ( (polinomio evaluar: 1) = 0 ).			self assert: ( (polinomio evaluar: '123') = 0 ).	! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/16/2013 11:04'!testEvaluandoMultiplicacionCruzada	"Test de evaluacion de mutiplicacion cruzada entre polinomios "	| polinomio1 polinomio2 |			polinomio1 := self polinomioNewtonGrado2: 1 and: 2.	polinomio2 := self polinomioNewtonGrado2: 2 and: 1.		self assert: ( polinomio1 = polinomio2 ).		self assert: ( (polinomio1 evaluar: 1) = (polinomio2 evaluar: 1)).		! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/16/2013 11:45'!testEvaluandoVariables	"Test de evaluacion de polinomios variables"	| evaluacion polinomioUno polinomioUnoBis |	"Polinomio 1*X"		polinomioUno := (self polinomioConstante1) * (PolinomioVariable new). 		"Polinomio X"		polinomioUnoBis := (PolinomioVariable new).       "Iguala ambos polinomios"		self assert: (polinomioUno = polinomioUnoBis ).      "Evalua polinomios variables en 0"		evaluacion := polinomioUno evaluar: 0.		self assert: ( evaluacion = 0 ).				 		evaluacion := polinomioUnoBis evaluar: 0.		self assert: ( evaluacion = 0 ).					"Evalua polinomios variables en 1"		evaluacion := polinomioUno evaluar: 1.		self assert: ( evaluacion = 1 ).				 		evaluacion := polinomioUnoBis evaluar: 1.		self assert: ( evaluacion = 1 ).			     "Evalua polinomios variables en strings numericas"		evaluacion := polinomioUno evaluar: '123'.		self assert: ( evaluacion = 123 ).					evaluacion := polinomioUnoBis evaluar: '123'.		self assert: ( evaluacion = '123' ).				"Evalua polinomios en cualquier cosa"			evaluacion := polinomioUnoBis evaluar: polinomioUno.		self assert: ( evaluacion = polinomioUno ).			self assert: ( evaluacion = polinomioUnoBis ).			! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:31'!testIgualdadConstantes	"Test de igualdad de polinomios constantes"	| polinomio1 polinomio2 polinomioPepe|		polinomio1 := self polinomioConstante69.	polinomio2 := self polinomio2.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( polinomio2 = polinomio2 ).		self assert: ( polinomio1 = polinomio2 ).	polinomioPepe := (PolinomioConstante new: 'pepe') * PolinomioVariable new.	self assert: polinomioPepe = (PolinomioVariable new * (PolinomioConstante new: 'pepe')).! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/16/2013 13:06'!testSuma	"Test de evaluacion de sumas de polinomios"	| unPolinomio |		"Suma de polinomios constantes"		unPolinomio := (self polinomioConstante0 + self polinomioConstante0).		self assert: ( (unPolinomio evaluar: 0) = 0 ).		self assert: ( (unPolinomio evaluar: 1) = 0 ).		self assert: ( (unPolinomio evaluar: -1) = 0 ).		self assert: ( (unPolinomio evaluar: '0') = 0 ).				unPolinomio := (self polinomioConstante0 + self polinomioConstante1).		self assert: ( (unPolinomio evaluar: 0) = 1 ).		self assert: ( (unPolinomio evaluar: 1) = 1 ).		self assert: ( (unPolinomio evaluar: -1) = 1 ).		self assert: ( (unPolinomio evaluar: '0') = 1 ).				unPolinomio := (self polinomioConstante0 + self polinomioConstante69).		self assert: ( (unPolinomio evaluar: 0) = 69 ).		self assert: ( (unPolinomio evaluar: 1) = 69 ).		self assert: ( (unPolinomio evaluar: -1) = 69 ).		self assert: ( (unPolinomio evaluar: '0') = 69 ).			unPolinomio := (self polinomioConstante1 + self polinomioConstante69).		self assert: ( (unPolinomio evaluar: 0) = 70 ).		self assert: ( (unPolinomio evaluar: 1) = 70 ).		self assert: ( (unPolinomio evaluar: -1) = 70 ).		self assert: ( (unPolinomio evaluar: '0') = 70 ).		self assert: ( (unPolinomio evaluar: 'CualquierCosa') = 70 ).				unPolinomio := (self polinomioConstante1Negativo  + self polinomioConstante69).		self assert: ( (unPolinomio evaluar: 0) = 68 ).		self assert: ( (unPolinomio evaluar: 1) = 68 ).		self assert: ( (unPolinomio evaluar: -1) = 68 ).		self assert: ( (unPolinomio evaluar: '0') = 68 ).					unPolinomio := (self polinomioConstante1Negativo  + self polinomioConstante1Negativo).		self assert: ( (unPolinomio evaluar: 0) = -2).		self assert: ( (unPolinomio evaluar: 1) = -2 ).		self assert: ( (unPolinomio evaluar: -1) = -2 ).		self assert: ( (unPolinomio evaluar: '0') = -2 ).			"Suma de polinomios variables"		unPolinomio := (PolinomioVariable new) + (PolinomioVariable new).		self assert: ( (unPolinomio evaluar: 1) = 2 ).		self assert: ( (unPolinomio evaluar: '1') = '2' ).		self assert: ( (unPolinomio evaluar: '-1') = '-2' ).		self assert: ( (unPolinomio evaluar: -1) = -2 ).		"Evalua el polinomio Constante -1 en el polinomio variable 2*X que da el polinomio constante -2"		self assert: ( ((unPolinomio evaluar: (self polinomioConstante1Negativo)) evaluar: 0) = -2 ).			! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:03'!polinomioConstante0	^ PolinomioConstante new: 0.! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:11'!polinomioConstante1	^ PolinomioConstante new: 1.! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 12:41'!polinomioConstante1Negativo	^ PolinomioConstante new: -1.! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:03'!polinomioConstante69 "Polinomio Constante igual a 69 escrito de otra forma"	^ (PolinomioConstante new:23) *  (PolinomioConstante new:3). ! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:04'!polinomioInstanciaBinomio "(x+1) * (x+2)"	^ self polinomioNewtonGrado2: 1 and: 2.! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:04'!polinomioNewtonGrado2: numero1 and: numero2 "(x+a) * (x+b)"	^ ((PolinomioVariable new) + (PolinomioConstante  new: numero1)) * 	   ((PolinomioVariable new) + (PolinomioConstante  new: numero2)). ! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:03'!testEvaluar	"Test de evaluación de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: ( (polinomio1 evaluar:  11) = 80).		self assert: ( (polinomio2 evaluar: nil) = 69).	self assert: ( (polinomio2 evaluar: 23) = 69).		self assert: ( (polinomio3 evaluar: 3) = 27).		self assert: ( (polinomio4 evaluar: 2) = 112).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:00'!testGrado	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: (polinomio1 grado = 1).	self assert: (polinomio2 grado = 0).	self assert: (polinomio3 grado = 3).	self assert: (polinomio4 grado = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:05'!testIgualdad	"Test de igualdad de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio5 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio5 := self polinomio5.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( (polinomio1 = polinomio2) not ).	self assert: ( polinomio3 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:18'!testMetaprogramacion	| polinomio |		polinomio := self polinomio1 .	self assert: ( (polinomio evaluar: (PolinomioTest new)  ) = 'AlguienNoEntiende' ).	self assert:( (polinomio evaluar: '12') = 81). ! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testMultiplicacion	"Test de multiplicacion de polinomios"	| polinomio3 polinomio5 polinomio6 polinomio7 |		polinomio3 := self polinomio3.	polinomio5 := self polinomio5.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.		self assert: (polinomio6 * polinomio7 = polinomio3).	self assert: (polinomio7 * polinomio6 = polinomio3).	self assert: (polinomio6 * polinomio7 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:16'!testSupremo	"El test supremo de los polinomios"	| polinomio3 polinomio6 polinomio7 polinomio8 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.	polinomio8 := self polinomio8.			self assert: ( (polinomio6 evaluar: polinomio7) = polinomio7).		self assert: ( (polinomio3 evaluar: polinomio6) = polinomio3).		self assert: ( (polinomio3 evaluar: polinomio7) = polinomio8). 		self assert: ( (polinomio7 evaluar: polinomio3) = polinomio8). ! !Object subclass: #Polinomio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:31'!* otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:31'!+ otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'mtqp 6/15/2013 16:41'!= otroPolinomio	| coefOtro filteredDiccOtro filteredDiccSelf |	coefOtro := otroPolinomio coeficientes.	filteredDiccOtro := coefOtro select: [:significado | significado ~= 0 ]. "Filtramos todos los coeficientes en cero para comparar la igualdad"	filteredDiccSelf := (self coeficientes) select: [:significado | significado ~= 0 ].	^ filteredDiccOtro = filteredDiccSelf.! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:40'!coeficientes! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:58'!evaluar: unValor! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:32'!grado! !Polinomio subclass: #PolinomioMultiplicacion	instanceVariableNames: 'polinomioIzquierdo polinomioDerecho'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:35'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'Martin 6/17/2013 22:38'!coeficientes 	| dicPolIzq dicPolDer newDic clavesDicIzq clavesDicDer claveMult significadoIzq significadoDer significadoMult sumaSignificado|	newDic := Dictionary new.	dicPolIzq := (polinomioIzquierdo coeficientes).	dicPolDer := (polinomioDerecho coeficientes).	clavesDicIzq := (dicPolIzq keys).	clavesDicDer := (dicPolDer keys).	clavesDicIzq do: [ :claveIzq | 		 			 		clavesDicDer do: [  :claveDer |																significadoIzq := dicPolIzq at: claveIzq.								significadoDer := dicPolDer at: claveDer.																significadoIzq = 1										ifTrue: [significadoMult := significadoDer]										ifFalse: [significadoDer = 1													ifTrue: [significadoMult := significadoIzq]													ifFalse: [significadoMult := significadoIzq * significadoDer]												].																	claveMult := claveIzq  + claveDer.								(									newDic at: claveMult 										ifPresent: 												[ : significadoPresenteEnNewDic |													sumaSignificado := significadoPresenteEnNewDic + significadoMult .													newDic at:claveMult put: sumaSignificado. ] 								 		ifAbsent: 												[ newDic at:claveMult put: significadoMult ]								)							]						].		^ newDic.! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 19:28'!evaluar: aValue    | polinomioIzqEvaluado resultadoEvaluacion |	polinomioIzqEvaluado := (polinomioIzquierdo evaluar: aValue).	(((polinomioIzqEvaluado class) allMethodsInCategory: (ClassOrganizer allCategory)) includes: '*') 					ifTrue: [ resultadoEvaluacion := polinomioIzqEvaluado * (polinomioDerecho evaluar: aValue) ] 					ifFalse: [ resultadoEvaluacion := 'AlguienNoEntiende'].	^ resultadoEvaluacion.! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:20'!grado 	^(polinomioIzquierdo grado) + (polinomioDerecho grado)! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:03'!initializeWith: unPolinomio and: otroPolinomio	polinomioIzquierdo := unPolinomio .	polinomioDerecho := otroPolinomio .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioMultiplicacion class	instanceVariableNames: ''!!PolinomioMultiplicacion class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:00'!new: unPolinomio with: otroPolimio 	^self new initializeWith: unPolinomio and: otroPolimio. 	! !Polinomio subclass: #PolinomioVariable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/15/2013 16:01'!coeficientes	| unDiccionario |	unDiccionario := Dictionary new.	unDiccionario at: 1 put: 1.	^ unDiccionario.! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:08'!evaluar: valor ^ valor ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:07'!grado 	^1! !Polinomio subclass: #PolinomioSuma	instanceVariableNames: 'polinomioIzquierdo polinomioDerecho'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 12:59'!coeficientes	"Se recorren ambos diccionarios y se suman los valores de sus claves. Si no existe una clave se define con el valor que tenga"	| dicPolIzq dicPolDer newDic clavesDicIzq clavesDicDer significado1 sumaSignificado|	newDic := Dictionary new.	dicPolIzq := (polinomioIzquierdo coeficientes).	dicPolDer := (polinomioDerecho coeficientes).	"Itero el diccionario del primer polinomio y guardo las definiciones que no interesecan con el diccionario2 en el nuevo diccionario y las definiciones que interesecan con el diccionario 2 sumadas"	clavesDicIzq := (dicPolIzq keys).	clavesDicIzq do: [ :clave |  							significado1 := dicPolIzq at: clave.  							(dicPolDer at: clave 								ifPresent: [ : significado2 |											sumaSignificado := significado1 + significado2.											newDic at:clave put: sumaSignificado. ] 							 	ifAbsent: 										[	newDic at:clave put: significado1]							)						].	"Itero el diccionario del segundo polinomio y guardo las definiciones que estan en la diferencia entre ambos diccionarios."	clavesDicDer := (dicPolDer keys).	clavesDicDer do: [ :clave |						(newDic at: clave 							ifAbsent: 								[ significado1 := dicPolDer at: clave.  								  newDic at:clave put: significado1])					 	].		^ newDic.! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 19:29'!evaluar: aValue    | polinomioIzqEvaluado resultadoEvaluacion |	polinomioIzqEvaluado := (polinomioIzquierdo evaluar: aValue).	(((polinomioIzqEvaluado class) allMethodsInCategory: (ClassOrganizer allCategory)) includes: '+') 					ifTrue: [ resultadoEvaluacion := polinomioIzqEvaluado + (polinomioDerecho evaluar: aValue) ] 					ifFalse: [ resultadoEvaluacion := 'AlguienNoEntiende'].	^ resultadoEvaluacion.! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:19'!grado 	^(polinomioIzquierdo grado) max: (polinomioDerecho grado)! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:04'!initializeWith: unPolinomio and: otroPolinomio	polinomioIzquierdo := unPolinomio.	polinomioDerecho := otroPolinomio.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioSuma class	instanceVariableNames: ''!!PolinomioSuma class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:06'!new: polinomioIzquierdo with: polinomioDerecho 	^self new initializeWith: polinomioIzquierdo and: polinomioDerecho.! !Polinomio subclass: #PolinomioConstante	instanceVariableNames: 'valor'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:30'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:29'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 12:42'!coeficientes	| unDiccionario |	unDiccionario := Dictionary new.	unDiccionario at: 0 put: valor.	^ unDiccionario.! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:13'!evaluar: aValor  ^ valor! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:07'!grado 	^0! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:29'!initializeWithValue: aValue	valor  := aValue.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioConstante class	instanceVariableNames: ''!!PolinomioConstante class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:28'!new: aValue	^self new initializeWithValue: aValue.! !