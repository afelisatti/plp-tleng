TestCase subclass: #PolinomioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioTest commentStamp: '<historical>' prior: 0!A PolinomioTest is a test class for testing the behavior of Polinomio!!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:02'!polinomio1		^ (PolinomioVariable new) + (PolinomioConstante new:69).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:02'!polinomio2	^ (PolinomioConstante new: 69).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:06'!polinomio3	^ (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'mtqp 6/15/2013 15:59'!polinomio4	^ (((PolinomioVariable new) * (PolinomioVariable new) + (PolinomioConstante new: 7)) * (PolinomioVariable new) )+ (PolinomioConstante new: 90).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:07'!polinomio6	^ (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:08'!polinomio7	^ (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'Martin 6/15/2013 13:18'!polinomio8	^ (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new) * (PolinomioVariable new).! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:47'!testAll	"Invoca todos los tests alumnos y catedra y del universo conocido"        self testAllAlumnos.	  self testAllCatedra.  ! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:44'!testAllAlumnos	"Invoca todos los tests de alumnos"	  self testCoeficientes.	  self testEvaluandoConstantes. 	  self testEvaluandoMultiplicacionCruzada.	  self testEvaluandoVariables. 	  self testIgualdadConstantes. 	 self testSuma.  ! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:46'!testAllCatedra	"Invoca todos los tests alumnos y catedra"        self testEvaluar.	  self testGrado.	  self testIgualdad.	  self testMetaprogramacion.	  self testMultiplicacion.	  self testSupremo.  ! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/16/2013 13:46'!testEvaluandoConstantes	"Test de evaluacion de polinomios constantes"	| polinomio evaluacion|      "Evalua polinomios constantes0"		evaluacion := self polinomioConstante0 evaluar: 0. 		self assert: ( evaluacion = 0 ).			evaluacion := self polinomioConstante0 evaluar: 1. 		self assert: ( evaluacion = 0 ).						evaluacion := self polinomioConstante0 evaluar: -1. 		self assert: ( evaluacion = 0 ).						evaluacion := self polinomioConstante0 evaluar: '1'. 		self assert: ( evaluacion = 0 ).					evaluacion := self polinomioConstante0 evaluar: [ :e | e+1].		self assert: ( evaluacion = 0 ).	     "Evalua polinomios constantes1"		evaluacion := self polinomioConstante1 evaluar: 0. 		self assert: ( evaluacion = 1 ).			evaluacion := self polinomioConstante1 evaluar: 1. 		self assert: ( evaluacion = 1 ).						evaluacion := self polinomioConstante1 evaluar: -1. 		self assert: ( evaluacion = 1 ).						evaluacion := self polinomioConstante1 evaluar: '1'. 		self assert: ( evaluacion = 1 ).						evaluacion := self polinomioConstante1 evaluar: [ :e | e+1].		self assert: ( evaluacion = 1 ).	     "Evalua polinomios constantes69"		evaluacion := self polinomioConstante69 evaluar: 0. 		self assert: ( evaluacion = 69 ).			evaluacion := self polinomioConstante69 evaluar: 1. 		self assert: ( evaluacion = 69 ).						evaluacion := self polinomioConstante69 evaluar: -1. 		self assert: ( evaluacion = 69 ).						evaluacion := self polinomioConstante69 evaluar: '1'. 		self assert: ( evaluacion = 69 ).					evaluacion := self polinomioConstante69 evaluar: [ :e | e+1].		self assert: ( evaluacion = 69 ).			"Polinomio 0*X"		polinomio := (self polinomioConstante0) * (PolinomioVariable new).		self assert: ( (polinomio evaluar: 1) = 0 ).			self assert: ( (polinomio evaluar: '123') = 0 ).	! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/19/2013 19:33'!testEvaluandoMultiplicacionCruzada	"Test de evaluacion de mutiplicacion cruzada entre polinomios "	| polinomio1 polinomio2 |		"Polinomio (x+1) * (x+2) = (x+2) * (x+1)"	polinomio1 := self polinomioNewtonGrado2: 1 and: 2.	polinomio2 := self polinomioNewtonGrado2: 2 and: 1.		self assert: ( polinomio1 = polinomio2 ).		self assert: ( (polinomio1 evaluar: 1) = (polinomio2 evaluar: 1)).		! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/16/2013 11:45'!testEvaluandoVariables	"Test de evaluacion de polinomios variables"	| evaluacion polinomioUno polinomioUnoBis |	"Polinomio 1*X"		polinomioUno := (self polinomioConstante1) * (PolinomioVariable new). 		"Polinomio X"		polinomioUnoBis := (PolinomioVariable new).       "Iguala ambos polinomios"		self assert: (polinomioUno = polinomioUnoBis ).      "Evalua polinomios variables en 0"		evaluacion := polinomioUno evaluar: 0.		self assert: ( evaluacion = 0 ).				 		evaluacion := polinomioUnoBis evaluar: 0.		self assert: ( evaluacion = 0 ).					"Evalua polinomios variables en 1"		evaluacion := polinomioUno evaluar: 1.		self assert: ( evaluacion = 1 ).				 		evaluacion := polinomioUnoBis evaluar: 1.		self assert: ( evaluacion = 1 ).			     "Evalua polinomios variables en strings numericas"		evaluacion := polinomioUno evaluar: '123'.		self assert: ( evaluacion = 123 ).					evaluacion := polinomioUnoBis evaluar: '123'.		self assert: ( evaluacion = '123' ).				"Evalua polinomios en cualquier cosa"			evaluacion := polinomioUnoBis evaluar: polinomioUno.		self assert: ( evaluacion = polinomioUno ).			self assert: ( evaluacion = polinomioUnoBis ).			! !!PolinomioTest methodsFor: 'testAlumnos' stamp: 'Martin 6/17/2013 22:31'!testIgualdadConstantes	"Test de igualdad de polinomios constantes"	| polinomio1 polinomio2 polinomioPepe|		polinomio1 := self polinomioConstante69.	polinomio2 := self polinomio2.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( polinomio2 = polinomio2 ).		self assert: ( polinomio1 = polinomio2 ).	polinomioPepe := (PolinomioConstante new: 'pepe') * PolinomioVariable new.	self assert: polinomioPepe = (PolinomioVariable new * (PolinomioConstante new: 'pepe')).! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/19/2013 19:30'!polinomioConstante0 "Polinomio Constante igual a 0"	^ PolinomioConstante new: 0.! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/19/2013 19:30'!polinomioConstante1 "Polinomio Constante igual a 1"	^ PolinomioConstante new: 1.! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:03'!polinomioConstante69 "Polinomio Constante igual a 69 escrito de otra forma"	^ (PolinomioConstante new:23) *  (PolinomioConstante new:3). ! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:04'!polinomioInstanciaBinomio "(x+1) * (x+2)"	^ self polinomioNewtonGrado2: 1 and: 2.! !!PolinomioTest methodsFor: 'polinomiosAlumnos' stamp: 'Martin 6/16/2013 11:04'!polinomioNewtonGrado2: numero1 and: numero2 "(x+a) * (x+b)"	^ ((PolinomioVariable new) + (PolinomioConstante  new: numero1)) * 	   ((PolinomioVariable new) + (PolinomioConstante  new: numero2)). ! !!PolinomioTest methodsFor: 'tests' stamp: 'Martin 6/19/2013 20:25'!testCoeficientes	"Test de coeficientes de polinomios"		|  polinomio1 polinomio4 |		polinomio1 := self polinomio1.	polinomio4 := self polinomio4.		self assert: ((polinomio1 coeficientes at: 0) = 69).	self assert: ((polinomio1 coeficientes at: 1) = 1).	self assert: ((polinomio4 coeficientes at: 0) = 90).	self assert: ((polinomio4 coeficientes at: 1) = 7).	self assert: ((polinomio4 coeficientes at: 3) = 1).	self assert: ( (polinomio4 coeficientes includesKey: 2) not).	self assert: ( (polinomio4 coeficientes includesKey: 4) not).	self assert: ( (polinomio4 coeficientes size) = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:03'!testEvaluar	"Test de evaluación de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: ( (polinomio1 evaluar:  11) = 80).		self assert: ( (polinomio2 evaluar: nil) = 69).	self assert: ( (polinomio2 evaluar: 23) = 69).		self assert: ( (polinomio3 evaluar: 3) = 27).		self assert: ( (polinomio4 evaluar: 2) = 112).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:00'!testGrado	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: (polinomio1 grado = 1).	self assert: (polinomio2 grado = 0).	self assert: (polinomio3 grado = 3).	self assert: (polinomio4 grado = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'Martin 6/19/2013 19:29'!testIgualdad	"Test de igualdad de polinomios"	| polinomio1 polinomio2 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( (polinomio1 = polinomio2) not ).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:18'!testMetaprogramacion	| polinomio |		polinomio := self polinomio1 .	self assert: ( (polinomio evaluar: (PolinomioTest new)  ) = 'AlguienNoEntiende' ).	self assert:( (polinomio evaluar: '12') = 81). ! !!PolinomioTest methodsFor: 'tests' stamp: 'Martin 6/19/2013 19:30'!testMultiplicacion	"Test de multiplicacion de polinomios"	| polinomio3 polinomio6 polinomio7 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.		self assert: (polinomio6 * polinomio7 = polinomio3).	self assert: (polinomio7 * polinomio6 = polinomio3).! !!PolinomioTest methodsFor: 'tests' stamp: 'Martin 6/19/2013 20:26'!testSuma	"Test suma de polinomios"	| polinomio1 polinomio2 polinomio6|		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio6 := self polinomio6.		self assert: (polinomio2 + polinomio6 = polinomio1).	self assert: (polinomio6 + polinomio2 = polinomio1).	! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:16'!testSupremo	"El test supremo de los polinomios"	| polinomio3 polinomio6 polinomio7 polinomio8 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.	polinomio8 := self polinomio8.			self assert: ( (polinomio6 evaluar: polinomio7) = polinomio7).		self assert: ( (polinomio3 evaluar: polinomio6) = polinomio3).		self assert: ( (polinomio3 evaluar: polinomio7) = polinomio8). 		self assert: ( (polinomio7 evaluar: polinomio3) = polinomio8). ! !Object subclass: #Polinomio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:31'!* otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:31'!+ otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'mtqp 6/15/2013 16:41'!= otroPolinomio	| coefOtro filteredDiccOtro filteredDiccSelf |	coefOtro := otroPolinomio coeficientes.	filteredDiccOtro := coefOtro select: [:significado | significado ~= 0 ]. "Filtramos todos los coeficientes en cero para comparar la igualdad"	filteredDiccSelf := (self coeficientes) select: [:significado | significado ~= 0 ].	^ filteredDiccOtro = filteredDiccSelf.! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:40'!coeficientes! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:58'!evaluar: unValor! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:32'!grado! !Polinomio subclass: #PolinomioMultiplicacion	instanceVariableNames: 'polinomioIzquierdo polinomioDerecho'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:35'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'Martin 6/19/2013 19:58'!coeficientes 	"Se recorren los diccionarios de coeficientes de ambos polinomios. Cada termino del polinomio de la izquierda se multiplica por cada termino del derecho"	"El resultado de cada multiplicacion se almacena en el diccionario resultante en la posicion que resulta de la suma del grado de dichos terminos. "	"Si ya existia un definicion para ese grado, se suma a la nueva." 	"Para poder hacer la multiplicacion en casos donde los coeficientes no son numericos, por ejemplo (pepe*X),  y el termino es una sucesion de multiplicaciones de variables, dicha multiplicacion no se efectua, sino que se devuelve el termino mismo, en el caso del ejemplo: pepe."	| dicPolIzq dicPolDer newDic clavesDicIzq clavesDicDer nuevoGrado coeficienteIzq coeficienteDer coeficientesMultiplicados sumaSignificado|	newDic := Dictionary new.	dicPolIzq := (polinomioIzquierdo coeficientes).	dicPolDer := (polinomioDerecho coeficientes).	clavesDicIzq := (dicPolIzq keys).	clavesDicDer := (dicPolDer keys).	clavesDicIzq do: [ :gradoIzq | 		 			 		clavesDicDer do: [  :gradoDer |																coeficienteIzq := dicPolIzq at: gradoIzq.								coeficienteDer := dicPolDer at: gradoDer.																coeficienteIzq = 1										ifTrue: [coeficientesMultiplicados := coeficienteDer]										ifFalse: [coeficienteDer = 1													ifTrue: [coeficientesMultiplicados := coeficienteIzq]													ifFalse: [coeficientesMultiplicados := coeficienteIzq * coeficienteDer]												].																	nuevoGrado := gradoIzq  + gradoDer.								(									newDic at: nuevoGrado 										ifPresent: 												[ : significadoPresenteEnNewDic |													sumaSignificado := significadoPresenteEnNewDic + coeficientesMultiplicados .													newDic at: nuevoGrado put: sumaSignificado. ] 								 		ifAbsent: 												[ newDic at: nuevoGrado put: coeficientesMultiplicados ]								)							]						].		^ newDic.! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'Martin 6/19/2013 20:15'!evaluar: aValue 	"Se multiplican los resultados de evaluar cada polinomio si ambos son capaces de responder al mensaje *. Para ello se obtiene el listado de metodos del objeto y sus superclases, y se verifica que entre ellos este *."   | polinomioIzqEvaluado resultadoEvaluacion |	polinomioIzqEvaluado := (polinomioIzquierdo evaluar: aValue).	(((polinomioIzqEvaluado class) allMethodsInCategory: (ClassOrganizer allCategory)) includes: '*') 					ifTrue: [ resultadoEvaluacion := polinomioIzqEvaluado * (polinomioDerecho evaluar: aValue) ] 					ifFalse: [ resultadoEvaluacion := 'AlguienNoEntiende'].	^ resultadoEvaluacion.! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:20'!grado 	^(polinomioIzquierdo grado) + (polinomioDerecho grado)! !!PolinomioMultiplicacion methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:03'!initializeWith: unPolinomio and: otroPolinomio	polinomioIzquierdo := unPolinomio .	polinomioDerecho := otroPolinomio .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioMultiplicacion class	instanceVariableNames: ''!!PolinomioMultiplicacion class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:00'!new: unPolinomio with: otroPolimio 	^self new initializeWith: unPolinomio and: otroPolimio. 	! !Polinomio subclass: #PolinomioVariable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/15/2013 16:01'!coeficientes	| unDiccionario |	unDiccionario := Dictionary new.	unDiccionario at: 1 put: 1.	^ unDiccionario.! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:08'!evaluar: valor ^ valor ! !!PolinomioVariable methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:07'!grado 	^1! !Polinomio subclass: #PolinomioSuma	instanceVariableNames: 'polinomioIzquierdo polinomioDerecho'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:36'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'Martin 6/19/2013 20:12'!coeficientes	"Se recorren ambos diccionarios y se suman los coeficientes de los terminos que tienen el mismo grado. Si en algun caso no existe un grado definido en el diccionario resultante, se define."	| dicPolIzq dicPolDer newDic clavesDicIzq clavesDicDer significado1 sumaSignificado|	newDic := Dictionary new.	dicPolIzq := (polinomioIzquierdo coeficientes).	dicPolDer := (polinomioDerecho coeficientes).	"Itero el diccionario del primer polinomio y guardo las definiciones que no interesecan con el diccionario2 en el nuevo diccionario y las definiciones que interesecan con el diccionario 2 sumadas"	clavesDicIzq := (dicPolIzq keys).	clavesDicIzq do: [ :clave |  							significado1 := dicPolIzq at: clave.  							(dicPolDer at: clave 								ifPresent: [ : significado2 |											sumaSignificado := significado1 + significado2.											newDic at:clave put: sumaSignificado. ] 							 	ifAbsent: 										[	newDic at:clave put: significado1]							)						].	"Itero el diccionario del segundo polinomio y guardo las definiciones que estan en la diferencia entre ambos diccionarios."	clavesDicDer := (dicPolDer keys).	clavesDicDer do: [ :clave |						(newDic at: clave 							ifAbsent: 								[ significado1 := dicPolDer at: clave.  								  newDic at:clave put: significado1])					 	].		^ newDic.! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'Martin 6/19/2013 20:15'!evaluar: aValue 	"Se suman los resultados de evaluar cada polinomio si ambos son capaces de responder al mensaje +. Para ello se obtiene el listado de metodos del objeto y sus superclases, y se verifica que entre ellos este +."   | polinomioIzqEvaluado resultadoEvaluacion |	polinomioIzqEvaluado := (polinomioIzquierdo evaluar: aValue).	(((polinomioIzqEvaluado class) allMethodsInCategory: (ClassOrganizer allCategory)) includes: '+') 					ifTrue: [ resultadoEvaluacion := polinomioIzqEvaluado + (polinomioDerecho evaluar: aValue) ] 					ifFalse: [ resultadoEvaluacion := 'AlguienNoEntiende'].	^ resultadoEvaluacion.! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:19'!grado 	^(polinomioIzquierdo grado) max: (polinomioDerecho grado)! !!PolinomioSuma methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:04'!initializeWith: unPolinomio and: otroPolinomio	polinomioIzquierdo := unPolinomio.	polinomioDerecho := otroPolinomio.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioSuma class	instanceVariableNames: ''!!PolinomioSuma class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:06'!new: polinomioIzquierdo with: polinomioDerecho 	^self new initializeWith: polinomioIzquierdo and: polinomioDerecho.! !Polinomio subclass: #PolinomioConstante	instanceVariableNames: 'valor'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:30'!* otroPolinomio 	^(PolinomioMultiplicacion new: self with: otroPolinomio). ! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 22:29'!+ otroPolinomio 	^(PolinomioSuma new: self with: otroPolinomio). ! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 12:42'!coeficientes	| unDiccionario |	unDiccionario := Dictionary new.	unDiccionario at: 0 put: valor.	^ unDiccionario.! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'Martin 6/15/2013 11:13'!evaluar: aValor  ^ valor! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:07'!grado 	^0! !!PolinomioConstante methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:29'!initializeWithValue: aValue	valor  := aValue.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PolinomioConstante class	instanceVariableNames: ''!!PolinomioConstante class methodsFor: 'as yet unclassified' stamp: 'mtqp 6/14/2013 21:28'!new: aValue	^self new initializeWithValue: aValue.! !